diff --git a/dist/runtime/app.js b/dist/runtime/app.js
index 0357150244d7af7d8a64f75ec126416c6743b11a..c3512905834d99d18586df435f9f96f58bbb22af 100644
--- a/dist/runtime/app.js
+++ b/dist/runtime/app.js
@@ -5,10 +5,16 @@ import { generateItemSurround } from "./internal/surround.js";
 import { generateSearchSections } from "./internal/search.js";
 import { fetchQuery } from "./internal/api.js";
 import { tryUseNuxtApp } from "#imports";
+const _queryCollection = (event, collection) => {
+  return collectionQureyBuilder(collection, (collection2, sql) => executeContentQuery(event, collection2, sql));
+}
 export const queryCollection = (collection) => {
-  return collectionQureyBuilder(collection, (collection2, sql) => executeContentQuery(collection2, sql));
+  const event = tryUseNuxtApp()?.ssrContext?.event
+  console.log("Event on queryCollection", !!event)
+  return collectionQureyBuilder(collection, (collection2, sql) => executeContentQuery(event, collection2, sql));
 };
 export function queryCollectionNavigation(collection, fields) {
+  console.log("Event on queryCollectionNavigation", !!tryUseNuxtApp()?.ssrContext?.event)
   return chainablePromise(collection, (qb) => generateNavigationTree(qb, fields));
 }
 export function queryCollectionItemSurroundings(collection, path, opts) {
@@ -17,11 +23,12 @@ export function queryCollectionItemSurroundings(collection, path, opts) {
 export async function queryCollectionSearchSections(collection, opts) {
   return generateSearchSections(queryCollection(collection), opts);
 }
-async function executeContentQuery(collection, sql) {
+async function executeContentQuery(event, collection, sql) {
+  console.log("Event on executeContentQuery", !!(event || tryUseNuxtApp()?.ssrContext?.event))
   if (import.meta.client) {
     return queryContentSqlClientWasm(collection, sql);
   } else {
-    return fetchQuery(tryUseNuxtApp()?.ssrContext?.event, String(collection), sql);
+    return fetchQuery(event || tryUseNuxtApp()?.ssrContext?.event, String(collection), sql);
   }
 }
 async function queryContentSqlClientWasm(collection, sql) {
@@ -32,6 +39,7 @@ async function queryContentSqlClientWasm(collection, sql) {
   return rows;
 }
 function chainablePromise(collection, fn) {
+  console.log("Event on chaninablePromise", !!tryUseNuxtApp()?.ssrContext?.event)
   const queryBuilder = queryCollection(collection);
   const chainable = {
     where(field, operator, value) {
diff --git a/dist/runtime/internal/api.js b/dist/runtime/internal/api.js
index 1f7dd8f6d45bda1903aa89d89f54d03d6ba8ca3d..fdc1d29abd1c534304a3ec627f71428f64ba18ab 100644
--- a/dist/runtime/internal/api.js
+++ b/dist/runtime/internal/api.js
@@ -1,11 +1,13 @@
 import { checksums } from "#content/manifest";
 export async function fetchDatabase(event, collection) {
-  return await $fetch(`/api/content/${collection}/database.sql`, {
+  const res = await $fetch(`/api/content/${collection}/database.sql`, {
     context: event ? { cloudflare: event.context.cloudflare } : {},
     responseType: "text",
     headers: { "content-type": "text/plain" },
     query: { v: checksums[String(collection)], t: import.meta.dev ? Date.now() : void 0 }
   });
+console.log(`~~> ${collection} -- ${String(res)} -- cf: ${!!event.context.cloudflare}`)
+  return res
 }
 export async function fetchQuery(event, collection, sql) {
   return await $fetch(`/api/content/${collection}/query`, {
diff --git a/dist/runtime/internal/database.server.js b/dist/runtime/internal/database.server.js
index 3934e4b18beee127547125f82248514341eba245..347f8e5149128ad3db61a909f6e21e8321069fe5 100644
--- a/dist/runtime/internal/database.server.js
+++ b/dist/runtime/internal/database.server.js
@@ -56,6 +56,8 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
     }
     await db.exec(`DELETE FROM ${tables.info} WHERE id = 'checksum_${collection}'`);
   }
+  console.log("collection", collection);
+  
   const dump = await loadDatabaseDump(event, collection).then(decompressSQLDump);
   await dump.reduce(async (prev, sql) => {
     await prev;
diff --git a/dist/runtime/internal/dump.js b/dist/runtime/internal/dump.js
index 1eea93c9f73fa5c167ac2b669760b0f4b03febe2..357263cc6e26fec58dfd212ab4f79945ff2226fa 100644
--- a/dist/runtime/internal/dump.js
+++ b/dist/runtime/internal/dump.js
@@ -1,4 +1,5 @@
 export async function decompressSQLDump(base64Str, compressionType = "gzip") {
+  console.log("base64Str", String(base64Str).substring(0, 100))
   const binaryData = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));
   const response = new Response(new Blob([binaryData]));
   const decompressedStream = response.body?.pipeThrough(new DecompressionStream(compressionType));
